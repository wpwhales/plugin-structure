<?php

namespace Tests\Session;


use Carbon\Carbon;
use Mockery\Mock;
use Symfony\Component\HttpFoundation\Cookie;
use WPWCore\Cookie\CookieJar;
use WPWCore\Http\Request;
use WPWCore\Session\SessionManager;
use WPWCore\Session\StartSession;
use WPWhales\Support\Facades\Date;
use WPWhales\Support\Facades\Schema;
use Mockery as m;
use WPWhales\Testing\TestResponse;

class DifferentSessionForUsersCookiesTest extends \WP_UnitTestCase
{


    protected static $files_directory = null;

    public function set_up()
    {
        parent::set_up();
        self::$files_directory = \WPWCore\config();
        $_COOKIE = [];
    }


    public function tear_down()
    {
        parent::tear_down();

        m::close();
    }

    public static function tear_down_after_class()
    {

        parent::tear_down_after_class(); // TODO: Change the autogenerated stub


        $directory = self::$files_directory["session"]["files"];
        $ignoreFiles = ['.gitignore', '.', '..'];

        $files = scandir($directory);

        foreach ($files as $file) {
            if (!in_array($file, $ignoreFiles)) {
                unlink($directory . '/' . $file);
            }
        }
    }


    public function test_session_cookie_name_for_guest_user()
    {
        $session = $this->createSession();

        $this->assertEquals($session->getName(), $this->app["config"]->get("session.cookie_guest"));
    }

    public function test_session_cookie_name_for_logged_in_user()
    {
        $user_id = $this->factory()->user->create();
        wp_set_current_user($user_id);

        $session = $this->createSession();

        $this->assertEquals($session->getName(), $this->app["config"]->get("session.cookie"));
    }


    public function test_session_cookie_transition_from_guest_to_logged_in_user()
    {

        //check as guest
        $session = $this->createSession();
        $this->assertEquals($session->getName(), $this->app["config"]->get("session.cookie_guest"));

        $_COOKIE[$session->getName()] = $session->getId();
        //new instance of session manager
        $this->app["session"] = new SessionManager($this->app);
        $session_2 = $this->createSession();

        //make sure two sessions are same as cookies are same
        $this->assertEquals($session->getName(), $session_2->getName());
        $this->assertEquals($session->getId(), $session_2->getId());

        $guest_session = $session;
        //check as logged in user
        $user_id = $this->factory()->user->create();
        wp_set_current_user($user_id);

        //new instance of session manager
        $this->app["session"] = new SessionManager($this->app);
        $session = $this->createSession();
        $this->assertEquals($session->getName(), $this->app["config"]->get("session.cookie"));
        $_COOKIE[$session->getName()] = $session->getId();

        //new instance of session manager
        $this->app["session"] = new SessionManager($this->app);
        $session_2 = $this->createSession();

        //make sure two sessions are same as cookies are same
        $this->assertEquals($session->getName(), $session_2->getName());
        $this->assertEquals($session->getId(), $session_2->getId());


        //Let's logout the user now .
        wp_set_current_user(0);
        $this->assertFalse(is_user_logged_in());
        //new instance of session manager
        $this->app["session"] = new SessionManager($this->app);
        $session = $this->createSession();
        $this->assertEquals($session->getName(), $guest_session->getName());
        $this->assertEquals($session->getId(), $guest_session->getId());

    }


    private function createSession()
    {
        $this->app["request"] = Request::capture();
        $session = new StartSession($this->app->make('session'));
        $session->handle();

        return $this->app->make('session');

    }


}
